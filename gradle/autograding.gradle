/*
 *  Copyright 2021 CNM Ingenuity, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
plugins {
    id 'java'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group 'edu.cnm.deepdive'
// version must be specified in gradle.properties

def solutionArtifact = "${project.name}-solution"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'GitHubPackages'
        url = "https://maven.pkg.github.com/${project.organization}/${solutionArtifact}"
        credentials {
            username = project.packageConsumerUser
            password = project.packageConsumerToken
        }
    }
}

dependencies {

    def junitVersion = '5.7.2'
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    def coordinates = "${project.group}:${solutionArtifact}:${stem(project.version as String)}.+"
    testRuntimeOnly "${coordinates}:tests"

}

task copyTests(type: Copy) {
    def pattern = ~"^.*${solutionArtifact}-.*-tests.jar\$"
    def jarFile = configurations.testRuntimeClasspath.find {
        it.name.matches(pattern)
    }
    from zipTree(jarFile)
    into "${projectDir}/autograding/"
}

task copyConfiguration(type: Copy) {
    dependsOn 'copyTests'
    from "${projectDir}/autograding/autograding.json"
    into "${projectDir}/.github/classroom/"
}

task copyReport(type: Copy) {
    from("${testReportDir}/test") {
        include '**/*'
    }
    into "${testReportDir}/combined/${project.reportName}/"
}

test {
    useJUnitPlatform()
    compileTestJava.enabled = false
    processTestResources.enabled = false
    dependsOn classes
    dependsOn 'copyTests'
    classpath -= testClassesDirs
    classpath -= files("${buildDir}/resources/test")
    testClassesDirs = files("${projectDir}/autograding")
    testLogging {
        events 'passed', 'failed', 'skipped'
    }
    finalizedBy copyReport
}

static String stem(String version) {
    version.substring(0, version.lastIndexOf('.'))
}
